//noise_remover.cpp
//Joshua Suggs
//January 2012

#include "noise_remover.h"
/*
class noise_remover{
   public:
      noise_remover();       
      noise_remover(pixel_space);//write copy constructor in pixel_space
      noise_remover(pixel_space,int);
      build_count_tree();
      set_replacements();
      smooth_the_field();
      pixel_space * return_pixel_space();
   private:
      pixel_space video_space;
      count_tree_node_pointer root;
      count_tree_node_list_pointer start;
      int tolerance;
}*/

noise_remover::noise_remover(){tolerance=0;video_space=NULL;root=NULL;start=NULL;}
noise_remover::noise_remover(pixel_space * in_space){
   tolerance=0;root=NULL;start=NULL;
   video_space=in_space;
}
//***************later I should make pixel_space copy itself in order to protect stuff
noise_remover::noise_remover(pixel_space * in_space, int tolerance){
   root=NULL;start=NULL;
   tolerance=0;
   video_space=in_space;
}
void noise_remover::build_count_tree(){
   int x1,x2,x3,length1,length2,length3;
   count_tree_node_pointer current;
   int * dimensions_copy=video_space->get_dimensions();
   if(video_space!=NULL){
      length1=dimensions_copy[0];
      length2=dimensions_copy[1];
      length3=dimensions_copy[2];
   }
   free(dimensions_copy);
   if(root!=NULL) delete_count_tree(root);
   root=(count_tree_node_pointer)malloc(sizeof(count_tree_node));
   current=root;
   ctn_add_value(current, this->video_space->get_cell(0,0,0));
   for(x1=0;x1<length1;x1++)
      for(x2=0;x2<length2;x2++)
         for(x3=0;x3<length3;x3++)
            ctn_add_value(current,this->video_space->get_cell(x1,x2,x3));
   ctn_subtract_value(current,this->video_space->get_cell(0,0,0));
}
void noise_remover::set_replacements(){
   int max_count, little_size;
   int damn_index;
   container_ctn_list_node_pointer big_list = tree_to_list(this->root);
   big_current=big_list;
   rgb_cell dom_cell;
   container_ctn_list_node_pointer little_list=NULL;
   container_ctn_list_node_pointer little_current=NULL;
   this->replacement_array=NULL;
   this->replacement_table_size=0
//traverse the now ordered list of cell values
   while(big_current !=NULL){
      add_to_container_list(little_list,big_current->element);
      little_current=little_list;
//build a list of all 'close enough' cell values to the one we see now
      while(big_current->next!=NULL  
            &&  rgb_euclidean_distance(little_current->element->data,big_current->next->element->data)<this->tolerance){
         add_to_container_list(little_list,big_current->next->element);
      }
      little_current=little_list;
      max_count=0;
      little_size=0;
//pick the dominant cell value out of the small list
      while(little_current!=NULL){
         if(little_current->element->count > max_count){
            max_count=little_current->element->count;
            dom_cell=this->element->data;
         } 
         little_current=little_current->next;
         little_size++;
      }
//now add to the replacement list
      this->replacement_array = (rgb_sub_ptr) realloc(this->replacement_array
                                                     ,(this->replacement_table_size+little_size)*sizeof(rgb_replacement));
      little_current=little_list;
      damn_index=0;
      while(little_current!=NULL){
         this->replacement_array[table_size+damn_index].to_replace=little_current->element->data;
         this->replacement_array[table_size+damn_index].replace_with=dom_cell;
         this->replacement_table_size++;
         little_current=little_current->next;
      }
   }
   //free the lists accordingly (tree too)
}

void noise_remover::smooth_the_field(){
   int x1,x2,x3,length1,length2,length3;
   int * dimensions_copy=video_space->get_dimensions();
   if(video_space!=NULL){
      length1=dimensions_copy[0];
      length2=dimensions_copy[1];
      length3=dimensions_copy[2];
   }
   free(dimensions_copy);
   for(x1=0;x1<length1;x1++)
      for(x2=0;x2<length2;x2++)
         for(x3=0;x3<length3;x3++)
            

}
   
